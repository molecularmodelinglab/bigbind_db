### Some basic examples for dealing with eg prefect and SQLite
### Lol most of these were generated by GitHub Copilot

import pandas as pd
from db import create_connection

def add_example_table(con):
    """ Adds a table with some example data into
    the BigBind database with pandas, ensuring that
    the table has a primary key. This table also
    has a uniqueness constraint on the name column.
    
    Try adding a row with the same name as an existing
    row to see what happens. """

    con.execute("DROP TABLE IF EXISTS example")
    con.execute("CREATE TABLE example (id INTEGER PRIMARY KEY, name TEXT, age INTEGER, CONSTRAINT unique_name UNIQUE (name))")

    # Create a DataFrame
    df = pd.DataFrame({
        'name': ['Alice', 'Bob', 'Charlie', 'David'],
        'age': [25, 26, 27, 28]
    })

    # Write the data to a sqlite table
    df.to_sql('example', con, if_exists='append', index=False)

def add_data_to_example(con):
    """ Adds some more data to the example table, but only adds rows
    for names that are not already in the table.
    """

    # Create a DataFrame
    df = pd.DataFrame({
        'name': ['Alice', 'Bob', 'Eve', 'Frank'],
        'age': [25, 26, 27, 28]
    })

    # first find all the names that are already in the table
    names = df['name'].tolist()
    # turn them into a string we can use in the query
    names_str = str(tuple(names))
    existing_names = pd.read_sql_query(f"SELECT name FROM example WHERE NAME in {names_str}", con)

    # remove the names that are already in the table
    df = df[~df['name'].isin(existing_names['name'])]

    df.to_sql("example", con, if_exists='append', index=False)

def get_table(con):
    """ Get the table from the BigBind database """

    # Read the data from the sqlite table
    return pd.read_sql_query("SELECT * FROM example", con).set_index('id')

def main():
    con = create_connection()
    add_example_table(con)
    add_data_to_example(con)
    # notice that the primary key is automatically generated
    print(get_table(con))

if __name__ == "__main__":
    main()