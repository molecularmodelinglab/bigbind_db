### Some basic examples for dealing with eg prefect and SQLite
### Lol most of these were generated by GitHub Copilot

import pandas as pd
from prefect import flow, task, get_run_logger

from bigbind.db import create_connection

def add_example_table(con):
    """ Adds a table with some example data into
    the BigBind database with pandas, ensuring that
    the table has a primary key. This table also
    has a uniqueness constraint on the name column.
    
    Try adding a row with the same name as an existing
    row to see what happens. """

    # notice that we're creating a cursor!
    # this ensures that if for some reason the create_table
    # fails, the cursor will be closed and table will never
    # be deleted
    cur = con.cursor()
    cur.execute("DROP TABLE IF EXISTS example")
    cur.execute("CREATE TABLE example (id INTEGER PRIMARY KEY, pdbID TEXT, chainID TEXT, residues TEXT)")
    con.commit()

    # Create a DataFrame
    df = pd.DataFrame(columns=['pdbID', 'chainID', 'residues'])

    # Write the data to a sqlite table
    df.to_sql('example', con, if_exists='append', index=False)

def add_data_to_example(con, df, row):
    """ Adds some more data to the example table, but only adds rows
    for names that are not already in the table.
    df: the existing probis data (since we don't want to create a new table everytime we add data)
    row: the row we want to add. The row should be a list
    """

    # Create a DataFrame
    #probisdf = df

    #Add row by item
    df2 = pd.DataFrame([row], columns=['pdbID', 'chainID', 'residues'])
    df = pd.concat([df, df2]).reset_index(drop=True)
    
    # first find all the names that are already in the table
    #names = df['name'].tolist()
    # turn them into a string we can use in the query
   # names_str = str(tuple(names))
    #existing_names = pd.read_sql_query(f"SELECT name FROM example WHERE NAME in {names_str}", con)

    # remove the names that are already in the table
    #df = df[~df['name'].isin(existing_names['name'])]

    df.to_sql("example", con, if_exists='append', index=False)

def get_table(con):
    """ Get the table from the BigBind database """

    # Read the data from the sqlite table
    return pd.read_sql_query("SELECT * FROM example", con).set_index('id')

@task
def make_table_task():
    """ Just a prefect task that adds some data to the example table"""
    con = create_connection()
    add_example_table(con)
    add_data_to_example(con)

@task
def get_table_task():
    """A task that gets the table """
    logger = get_run_logger()
    con = create_connection()

    logger.info("Added some data to the example table")
    df = get_table(con)
    logger.info(f"Length of the table: {len(df)}")

@flow
def data_flow():
    """ A flow that adds some data to the example table and then gets the table.
    These tasks are executed concurrently! The get_table_task sometimes
    runs before the data_task is finished. """
    make_table_task.submit()
    get_table_task.submit()

def main():
    data_flow()

if __name__ == "__main__":
    main()
